@using JobApplications.ViewModels
@model job_applicationVMEdit

@{
   ViewBag.Title = "Edit";
}

@if (Model.id == 0) {
<h2>Create Job Application</h2>
}
else {
<h2>Edit Job Application</h2>
}
<hr />

@using (Html.BeginForm("Save", "JobApplications")) {
@Html.AntiForgeryToken()

<div class="form-horizontal">
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.id)


    <div class="form-group">
        @Html.LabelFor(model => model.job_site_id, "job_site_id", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownListFor(model => model.job_site_id, new SelectList(Model.job_sites, "Id", "Name"), "", htmlAttributes: new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.job_site_id, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.job_site_reference, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.job_site_reference, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.job_site_reference, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.employment_agency_id, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownListFor(model => model.employment_agency_id, new SelectList(Model.employment_agencies, "Id", "Name"), "", htmlAttributes: new { @class = "form-control", @onchange = "employmentAgencyChanged(this);" })
            @Html.ValidationMessageFor(model => model.employment_agency_id, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.employment_agency_contact_id, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownListFor(model => model.employment_agency_contact_id, new SelectList(Model.employment_agency_contacts, "id", "contact_name"), "", htmlAttributes: new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.employment_agency_contact_id, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.employment_agency_reference, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.employment_agency_reference, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.employment_agency_reference, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.company_name, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.company_name, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.company_name, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.company_location, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.company_location, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.company_location, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.job_title, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.job_title, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.job_title, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.application_date, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.application_date, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.application_date, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Save" class="btn btn-success" />
            <input type="button" value="Cancel" class="btn btn-danger" onclick="goBack();" style="padding-left: 10px;" />
        </div>
    </div>
</div>
}

<button type="button" class="btn btn-info" id="btnAddJobSite" onclick="addJobSiteModal();">Add</button>

<div class="modal fade" id="addJobSiteContainer" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h3>Add Job Site</h3>
            </div>
            <div class="modal-body">
                @using (Html.BeginForm("Add", "JobSites", FormMethod.Post, new { @name = "addJobSiteForm", @id = "addJobSiteForm" })) {
                <div class="form-horizontal">
                    <div class="form-group">
                        @Html.LabelFor(model => model.job_site.name, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.job_site.name, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.job_site.name, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.job_site.url, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.job_site.url, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.job_site.url, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-success">Add</button>
                <button type="button" class="btn btn-danger" data-dismiss="modal" style="padding-left: 10px;">Cancel</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}

<script>
    function goBack() {
        window.location.href = '@Url.Action("Index")';
    }

    function employmentAgencyChanged(agencyList) {
        // Get the selected agency.
        let item = agencyList.options[agencyList.selectedIndex];

        // Clear the agency contact list.
        let contactList = document.getElementById("@Html.IdFor(model => Model.employment_agency_contact_id)");

        while (contactList.options.length > 0) {
            contactList.options.remove(0);
        }

        // Create a blank contact entry.
        contactList.options[0] = new Option("", "", false, false);

        if (item.value != "") {
            // Go an retrieve a list of contacts for the selected agency.
            $.getJSON("/api/EmploymentAgencyContacts/" + item.value, null, function (data, textStatus, jqXHR) {
                // Add the retrieved contacts to the contact list.
                let idx = 0;
                while (idx < data.length) {
                    let contact = data[idx];
                    let opt = new Option(contact.contact_name, contact.id, false, false);
                    contactList.options[contactList.options.length] = opt;
                    ++idx;
                }
            })
            .error(function (jqXHR, options, error) {
                alert(jqXHR.responseJSON.message);
            });
        }
    }

    function addJobSiteModal() {
        let form = document.forms["addJobSiteForm"];
        form["job_site.name"].value = "";
        form["job_site.url"].value = "";

        $("#addJobSiteContainer").modal();
    }

    function xx(o) {
        let s = '';
        let first = true;

        if (o == null) {
            s = "<null>";
        }
        else if (typeof o == "object") {
            s = "{";
            for (var i in o) {
                if (first) {
                    first = false;
                }
                else {
                    s += ", ";
                }

                s = s + i + "=";

                if (typeof o[i] == "function") {
                    s += "function()";
                }
                else {
                    s += xx(o[i]);
                }
            }
            s += "}";
        }
        else {
            s = o;
        }

        return s;
    }

    $(document).ready(function () {
        $("#addJobSiteContainer").on("shown.bs.modal", function () {
            document.forms["addJobSiteForm"]["job_site.name"].focus();
        });
    });
</script>